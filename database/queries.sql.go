// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const deleteExpense = `-- name: DeleteExpense :exec
delete from expenses
where id = ?
`

func (q *Queries) DeleteExpense(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getCredentials = `-- name: GetCredentials :one
select salt, hashpassword from users
where name = ?
`

type GetCredentialsRow struct {
	Salt         []byte
	Hashpassword []byte
}

func (q *Queries) GetCredentials(ctx context.Context, name string) (GetCredentialsRow, error) {
	row := q.db.QueryRowContext(ctx, getCredentials, name)
	var i GetCredentialsRow
	err := row.Scan(&i.Salt, &i.Hashpassword)
	return i, err
}

const getExpenses = `-- name: GetExpenses :many
select id, user, description, category, amount, created_date from expenses
where user = ?
`

func (q *Queries) GetExpenses(ctx context.Context, user string) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpenses, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Description,
			&i.Category,
			&i.Amount,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByCategory = `-- name: GetExpensesByCategory :many
select id, user, description, category, amount, created_date from expenses
where category = ? and user = ?
`

type GetExpensesByCategoryParams struct {
	Category string
	User     string
}

func (q *Queries) GetExpensesByCategory(ctx context.Context, arg GetExpensesByCategoryParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByCategory, arg.Category, arg.User)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Description,
			&i.Category,
			&i.Amount,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByDate = `-- name: GetExpensesByDate :many
select id, user, description, category, amount, created_date from expenses
where created_date >= ? and user = ?
`

type GetExpensesByDateParams struct {
	CreatedDate time.Time
	User        string
}

func (q *Queries) GetExpensesByDate(ctx context.Context, arg GetExpensesByDateParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByDate, arg.CreatedDate, arg.User)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Description,
			&i.Category,
			&i.Amount,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpensesByDateAndCategory = `-- name: GetExpensesByDateAndCategory :many
select id, user, description, category, amount, created_date from expenses
where created_date >= ? and category = ? and user = ?
`

type GetExpensesByDateAndCategoryParams struct {
	CreatedDate time.Time
	Category    string
	User        string
}

func (q *Queries) GetExpensesByDateAndCategory(ctx context.Context, arg GetExpensesByDateAndCategoryParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getExpensesByDateAndCategory, arg.CreatedDate, arg.Category, arg.User)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Description,
			&i.Category,
			&i.Amount,
			&i.CreatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
select name, salt, hashpassword from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Name, &i.Salt, &i.Hashpassword); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertExpense = `-- name: InsertExpense :one
insert into expenses (user, category, amount, description)
values (?, ?, ?, ?)
returning id
`

type InsertExpenseParams struct {
	User        string
	Category    string
	Amount      float64
	Description string
}

func (q *Queries) InsertExpense(ctx context.Context, arg InsertExpenseParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertExpense,
		arg.User,
		arg.Category,
		arg.Amount,
		arg.Description,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertUser = `-- name: InsertUser :one
insert into users (name, salt, hashpassword)
values (?, ?, ?)
returning name
`

type InsertUserParams struct {
	Name         string
	Salt         []byte
	Hashpassword []byte
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Name, arg.Salt, arg.Hashpassword)
	var name string
	err := row.Scan(&name)
	return name, err
}

const updateExpense = `-- name: UpdateExpense :exec
update expenses
set category = ?, amount = ?, description = ?
where id = ?
`

type UpdateExpenseParams struct {
	Category    string
	Amount      float64
	Description string
	ID          int64
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) error {
	_, err := q.db.ExecContext(ctx, updateExpense,
		arg.Category,
		arg.Amount,
		arg.Description,
		arg.ID,
	)
	return err
}

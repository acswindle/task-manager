// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
)

const getCredentials = `-- name: GetCredentials :one
select salt, hashpassword from users
where name = ?
`

type GetCredentialsRow struct {
	Salt         []byte
	Hashpassword []byte
}

func (q *Queries) GetCredentials(ctx context.Context, name string) (GetCredentialsRow, error) {
	row := q.db.QueryRowContext(ctx, getCredentials, name)
	var i GetCredentialsRow
	err := row.Scan(&i.Salt, &i.Hashpassword)
	return i, err
}

const getUsers = `-- name: GetUsers :many
select id, name, salt, hashpassword from users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Salt,
			&i.Hashpassword,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
insert into users (name, salt, hashpassword)
values (?, ?, ?)
returning id
`

type InsertUserParams struct {
	Name         string
	Salt         []byte
	Hashpassword []byte
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertUser, arg.Name, arg.Salt, arg.Hashpassword)
	var id int64
	err := row.Scan(&id)
	return id, err
}
